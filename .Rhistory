plot(x,y)
python
setwd('~/phyloRNA/')
cnv.calls <- read.delim('~/phyloRNA/DO32_CNA_calls.txt',sep='\t',header=T)
# Plotting
par(mfrow=c(2,1))
#CN Plot
plotSegmentMedians(cnv.calls, chr=5, resultType = "LogRatio", plotType = "CopyNumber",
plot.new = TRUE, ylim = c(0, 4), main="Chr 5")
library(TitanCNA)
# Plotting
par(mfrow=c(2,1))
#CN Plot
plotSegmentMedians(cnv.calls, chr=5, resultType = "LogRatio", plotType = "CopyNumber",
plot.new = TRUE, ylim = c(0, 4), main="Chr 5")
head(cnv.calls)
library(TitanCNA)
plotSegmentMedians(cnv.calls, chr=5, resultType = "LogRatio", plotType = "CopyNumber",
plot.new = TRUE, ylim = c(0, 4), main="Chr 5")
cnv.calls <- read.delim('~/phyloRNA/DO32_CNA_calls.txt',sep='\t',header=T,stringsAsFactors = F)
library(TitanCNA)
plotSegmentMedians(cnv.calls, chr=5, resultType = "LogRatio", plotType = "CopyNumber",
plot.new = TRUE, ylim = c(0, 4), main="Chr 5")
?plotSegmentMedians
library(TitanCNA)
plotSegmentMedians(cnv.calls, resultType = "LogRatio", plotType = "CopyNumber",
plot.new = TRUE, ylim = c(0, 4), main="Chr 5")
head(cnv.calls)
library(TitanCNA)
plotSegmentMedians(cnv.calls, chr="5", resultType = "LogRatio", plotType = "CopyNumber",
plot.new = TRUE, ylim = c(0, 4), main="Chr 5")
library(TitanCNA)
plotSegmentMedians(t(cnv.calls), chr="5", resultType = "LogRatio", plotType = "CopyNumber",
plot.new = TRUE, ylim = c(0, 4), main="Chr 5")
chr1 <- cnv.calls$Copy_Number[cnv.calls$Chromosome=='1',]
dim(cnv.calls)
cnv.calls$Chromosome=='1'
cnv.calls$Chromosome=='1',
chr1 <- cnv.calls$Copy_Number[cnv.calls$Chromosome=='1']
chr1 <- cnv.calls$Copy_Number[cnv.calls$Chromosome=='1']
plot(chr1)
chr1
head(cnv.calls)
chr1 <- cnv.calls$Copy_Number[cnv.calls$Chromosome=='5']
plot(chr1)
chr1 <- cnv.calls$Copy_Number[cnv.calls$Chromosome=='5']
plot(chr1,pch=16)
library(TitanCNA)
plotSegmentMedians(cnv.calls, chr="5", resultType = "LogRatio", plotType = "CopyNumber",
plot.new = TRUE, ylim = c(0, 4), main="Chr 5")
library(TitanCNA)
library(data.table)
plotSegmentMedians(cnv.calls, chr="5", resultType = "LogRatio", plotType = "CopyNumber",
plot.new = TRUE, ylim = c(0, 4), main="Chr 5")
data.table(cnv.calls)
library(TitanCNA)
library(data.table)
plotSegmentMedians(data.table(cnv.calls), chr="5", resultType = "LogRatio", plotType = "CopyNumber",
plot.new = TRUE, ylim = c(0, 4), main="Chr 5")
library(data.table)
cnv.calls <- fread('~/phyloRNA/DO32_CNA_calls.txt',sep='\t', header=T, stringsAsFactors = F)
library(TitanCNA)
plotSegmentMedians(data.table(cnv.calls), chr="5", resultType = "LogRatio", plotType = "CopyNumber",
plot.new = TRUE, ylim = c(0, 4), main="Chr 5")
library(TitanCNA)
plotSegmentMedians(cnv.calls, chr="5", resultType = "LogRatio", plotType = "CopyNumber",
plot.new = TRUE, ylim = c(0, 4), main="Chr 5")
library(data.table)
cnv.calls <- fread('~/phyloRNA/DO32_CNA_calls.txt',sep='\t', header=T, stringsAsFactors = F)
library(TitanCNA)
plotSegmentMedians(cnv.calls, chr=5, resultType = "LogRatio", plotType = "CopyNumber",
plot.new = TRUE, ylim = c(0, 4), main="Chr 5")
head(cnv.calls)
library(data.table)
cnv.calls <- fread('~/phyloRNA/DO32_CNA_calls.txt',sep='\t', header=T)
library(TitanCNA)
plotSegmentMedians(cnv.calls, chr=5, resultType = "LogRatio", plotType = "CopyNumber",
plot.new = TRUE, ylim = c(0, 4), main="Chr 5")
library(data.table)
cnv.calls <- fread('~/phyloRNA/DO32_CNA_calls.txt',sep='\t', header=T)
library(TitanCNA)
plotSegmentMedians(cnv.calls, chr=5, resultType = "LogRatio", plotType = "CopyNumber",
plot.new = TRUE, ylim = c(0, 4), main="Chr 5")
library(TitanCNA)
par(mfrow=c(3,3))
for(i in 1:9){
plotSegmentMedians(cnv.calls, chr=i, resultType = "LogRatio", plotType = "CopyNumber",
plot.new = TRUE, ylim = c(0, 4), main="Chr 5")
}
library(TitanCNA)
par(mfrow=c(3,3))
chrs = c(1,3,5,7,9,11,13,15,17)
for(i in 1:length(chrs)){
plotSegmentMedians(cnv.calls, chr=chrs[i], resultType = "LogRatio", plotType = "CopyNumber",
plot.new = TRUE, ylim = c(0, 4), main="Chr 5")
}
library(TitanCNA)
par(mfrow=c(3,3))
chrs = c(1,3,5,7,9,11,13,15,17)
for(i in 1:length(chrs)){
plotSegmentMedians(cnv.calls, chr=chrs[i], resultType = "LogRatio", plotType = "CopyNumber",
plot.new = TRUE, ylim = c(0, 4), main=paste('Chr ',chrs[i]))
}
sizes =  cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.
hist(sizes)
sizes =  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
hist(sizes)
sizes =  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
hist(sizes, xlim = c(0,5000))
sizes =  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
hist(sizes, xlim = c(0,5000),100)
dim(cnv.calls)[1]
sizes =  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
hist(sizes, xlim = c(0,1000),breaks = 100,xlab = Size (kb))
sizes =  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
hist(sizes, xlim = c(0,1000),breaks = 100,xlab = "Size (kb)")
sizes =  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
hist(sizes, xlim = c(0,1000),breaks = 200,xlab = "Size (kb)")
sizes =  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
hist(sizes, xlim = c(0,1000),breaks = 500,xlab = "Size (kb)")
sizes =  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
hist(sizes, xlim = c(0,1000),breaks = 1000,xlab = "Size (kb)")
sizes =  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
hist(sizes, xlim = c(0,1000),breaks = 500,xlab = "Size (kb)")
sizes =  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
hist(sizes, xlim = c(0,1000),breaks = 500,xlab = "Size (kb)",main='Distribution of CNV Sizes')
library(ggplot2)
sizes =  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
cnv.calls$sizes = sizes
ggplot(cnv.calls, aes(sizes)) + geom_histogram()
library(ggplot2)
sizes =  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
cnv.calls$sizes = sizes
ggplot(cnv.calls, aes(sizes)) + geom_histogram(bins=1000)
library(ggplot2)
sizes =  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
cnv.calls$sizes = sizes
ggplot(cnv.calls, aes(sizes)) + geom_histogram(bins=500)
library(ggplot2)
sizes =  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
cnv.calls$sizes = sizes
ggplot(cnv.calls, aes(sizes)) + geom_histogram(bins=500) + xlim(c(0,500))
library(ggplot2)
sizes =  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
cnv.calls$sizes = sizes
ggplot(cnv.calls, aes(sizes)) + geom_histogram(bins=100) + xlim(c(0,500))
library(ggplot2)
sizes =  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
cnv.calls$sizes = sizes
ggplot(cnv.calls, aes(sizes)) + geom_histogram(bins=30) + xlim(c(0,500))
library(ggplot2)
sizes =  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
cnv.calls$sizes = sizes
ggplot(cnv.calls[cnv.calls$sizes<1000,], aes(sizes)) + geom_histogram(bins=30) + xlim(c(0,500))
library(ggplot2)
sizes =  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
cnv.calls$sizes = sizes
ggplot(cnv.calls[cnv.calls$sizes<1000,], aes(sizes)) + geom_histogram(bins=30)
library(ggplot2)
sizes =  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
ggplot(sizes, aes(sizes)) + geom_histogram(bins=30)
library(ggplot2)
sizes <-  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
size.df <- sizes
ggplot(sizes, aes(sizes)) + geom_histogram(bins=30)
library(ggplot2)
sizes <-  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
size.df <- sizes
ggplot(size.df, aes(sizes)) + geom_histogram(bins=30)
size.df
library(ggplot2)
sizes <-  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
size.df <- data.frame(sizes=sizes)
ggplot(size.df, aes(sizes)) + geom_histogram(bins=30)
library(ggplot2)
sizes <-  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
size.df <- data.frame(sizes=sizes[sizes<500])
ggplot(size.df, aes(sizes)) + geom_histogram(bins=30)
library(ggplot2)
sizes <-  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
size.df <- data.frame(sizes=sizes[sizes<500])
ggplot(size.df, aes(sizes)) + geom_histogram(bins=30,color='black',fill='lightblue')
library(ggplot2)
sizes <-  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
size.df <- data.frame(sizes=sizes[sizes<500])
ggplot(size.df, aes(sizes)) + geom_histogram(bins=30,color='black',fill='lightblue',linetype='dashed')
library(ggplot2)
sizes <-  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
size.df <- data.frame(sizes=sizes[sizes<500])
ggplot(size.df, aes(sizes)) + geom_histogram(bins=30,color='black',fill='lightblue',linetype='dashed') + xlab('Sizes (kb)')
library(ggplot2)
sizes <-  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
size.df <- data.frame(sizes=sizes[sizes<500])
ggplot(size.df, aes(sizes)) + geom_histogram(bins=30,color='black',fill='lightblue',linetype='dashed') + xlab('CNV size (kb)')
library(ggplot2)
sizes <-  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
size.df <- data.frame(sizes=sizes[sizes<500])
ggplot(size.df, aes(sizes)) + geom_histogram(bins=30,color='black',fill='lightblue',linetype='dashed') + xlab('CNV size (kb)')
library(TitanCNA)
par(mfrow=c(4,3))
chrs = c(1,3,5,7,9,11,13,15,17,19,22,23)
for(i in 1:length(chrs)){
plotSegmentMedians(cnv.calls, chr=chrs[i], resultType = "LogRatio", plotType = "CopyNumber",
plot.new = TRUE, ylim = c(0, 4), main=paste('Chr ',chrs[i]))
}
library(TitanCNA)
par(mfrow=c(4,3))
chrs = c(1,3,5,7,9,11,13,15,17,19,21,22,23)
for(i in 1:length(chrs)){
plotSegmentMedians(cnv.calls, chr=chrs[i], resultType = "LogRatio", plotType = "CopyNumber",
plot.new = TRUE, ylim = c(0, 4), main=paste('Chr ',chrs[i]))
}
library(TitanCNA)
par(mfrow=c(4,3))
chrs = c(1,3,5,7,9,11,13,15,17,19,21,22)
for(i in 1:length(chrs)){
plotSegmentMedians(cnv.calls, chr=chrs[i], resultType = "LogRatio", plotType = "CopyNumber",
plot.new = TRUE, ylim = c(0, 4), main=paste('Chr ',chrs[i]))
}
sum(sizes==0)/length(sizes)
sizes
sizes=0
sum(sizes==0)
sum(sizes==0)/length(sizes)
library(TitanCNA)
par(mfrow=c(3,3))
chrs = c(1,3,5,7,9,11,13,15,17)
for(i in 1:length(chrs)){
plotSegmentMedians(cnv.calls, chr=chrs[i], resultType = "LogRatio", plotType = "CopyNumber",
plot.new = TRUE, ylim = c(0, 4), main=paste('Chr ',chrs[i]))
}
library(TitanCNA)
par(mfrow=c(3,2))
chrs = c(1,5,9,13,17,22)
for(i in 1:length(chrs)){
plotSegmentMedians(cnv.calls, chr=chrs[i], resultType = "LogRatio", plotType = "CopyNumber",
plot.new = TRUE, ylim = c(0, 4), main=paste('Chr ',chrs[i]))
}
library(TitanCNA)
par(mfrow=c(3,2))
chrs = c(1,5,9,13,17,21)
for(i in 1:length(chrs)){
plotSegmentMedians(cnv.calls, chr=chrs[i], resultType = "LogRatio", plotType = "CopyNumber",
plot.new = TRUE, ylim = c(0, 4), main=paste('Chr ',chrs[i]))
}
cnv.calls$Clonal_Frequency
ggplot(cnv.calls, aes(Clonal_Frequency)) + geom_histogram(bins=30,color='black',fill='lightblue',linetype='dashed') + xlab('CNV size (kb)')
ggplot(cnv.calls, aes(y=Copy_Number,x=Clonal_Frequency)) +
geom_boxplot()
ggplot(cnv.calls, aes(y=Copy_Number,x=Clonal_Frequency)) +
geom_violin()
cnv.calls$Clonal_Cluster
ggplot(cnv.calls, aes(y=Copy_Number,x=Clonal_Cluster)) +
geom_violin()
cnv.calls$Clonal_Cluster
cnv.calls$Clonal_Cluster = as.factor(cnv.calls$Clonal_Cluster)
ggplot(cnv.calls, aes(y=Copy_Number,x=Clonal_Cluster)) +
geom_violin()
cnv.calls$Clonal_Cluster = as.factor(cnv.calls$Clonal_Cluster)
ggplot(cnv.calls, aes(y=Copy_Number,x=Clonal_Cluster)) +
geom_boxplot()
cnv.calls$Clonal_Cluster = as.factor(cnv.calls$Clonal_Cluster)
ggplot(cnv.calls, aes(y=Copy_Number,x=Clonal_Cluster,fill=Clonal_Cluster)) +
geom_boxplot()
cnv.calls$Clonal_Cluster = as.factor(cnv.calls$Clonal_Cluster)
ggplot(cnv.calls, aes(y=Copy_Number,x=Clonal_Cluster,fill=Clonal_Cluster)) +
geom_boxplot() + theme(legend.position = 'none')
cnv.calls$Clonal_Cluster = as.factor(cnv.calls$Clonal_Cluster)
ggplot(cnv.calls, aes(y=Copy_Number,x=Clonal_Cluster,fill=Clonal_Cluster)) +
geom_boxplot() + theme(legend.position = 'none') + xlab('Clonal Cluster')
cnv.calls$Clonal_Cluster = as.factor(cnv.calls$Clonal_Cluster)
ggplot(cnv.calls, aes(y=Copy_Number,x=Clonal_Cluster,fill=Clonal_Cluster)) +
geom_boxplot() + theme(legend.position = 'none') + xlab('Clonal Cluster') + ylab('Copy Number')
library(data.table)
cnv.calls <- fread('~/phyloRNA/DO32_CNA_calls_5Subclones.txt',sep='\t', header=T)
library(ggplot2)
sizes <-  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
size.df <- data.frame(sizes=sizes[sizes<500])
ggplot(size.df, aes(sizes)) + geom_histogram(bins=30,color='black',fill='lightblue',linetype='dashed') + xlab('CNV size (kb)')
library(data.table)
cnv.calls <- fread('~/phyloRNA/DO32_CNA_calls_5Subclones.txt',sep='\t', header=T)
library(ggplot2)
sizes <-  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
size.df <- data.frame(sizes=sizes[sizes<500])
ggplot(size.df, aes(sizes)) + geom_histogram(bins=30,color='black',fill='lightblue',linetype='dashed') + xlab('CNV size (kb)')
cnv.calls$Clonal_Cluster = as.factor(cnv.calls$Clonal_Cluster)
ggplot(cnv.calls, aes(y=Copy_Number,x=Clonal_Cluster,fill=Clonal_Cluster)) +
geom_boxplot(jitter(Copy_Number)) + theme(legend.position = 'none') + xlab('Clonal Cluster') + ylab('Copy Number')
cnv.calls$Clonal_Cluster = as.factor(cnv.calls$Clonal_Cluster)
ggplot(cnv.calls, aes(y=Copy_Number,x=Clonal_Cluster,fill=Clonal_Cluster)) +
geom_boxplot(outlier.colour = 'red') + theme(legend.position = 'none') + xlab('Clonal Cluster') + ylab('Copy Number')
cnv.calls$Clonal_Cluster = as.factor(cnv.calls$Clonal_Cluster)
ggplot(cnv.calls, aes(y=Copy_Number,x=Clonal_Cluster,fill=Clonal_Cluster)) +
geom_boxplot() + theme(legend.position = 'none') + xlab('Clonal Cluster') + ylab('Copy Number')
cnv.calls$Clonal_Cluster = as.factor(cnv.calls$Clonal_Cluster)
ggplot(cnv.calls, aes(y=Copy_Number,x=Clonal_Cluster,fill=Clonal_Cluster)) +
geom_boxplot() + theme(legend.position = 'none') + xlab('Clonal Cluster') + ylab('Copy Number')
cnv.calls
ggplot(cnv.calls, aes(Clonal_Frequency)) + geom_histogram(bins=30,color='black',fill='lightblue',linetype='dashed') + xlab('CNV size (kb)')
muts <- read.table('ssm_data.txt',sep='\t',header=T)
head(muts)
AF.df <- data.frame(AF=(muts$d - muts$a)/muts$d)
ggplot(AF.df, aes(AF)) + geom_histogram(bins=30,color='black',fill='lightblue',linetype='dashed') + xlab('Cellular Frequency') + ylab('Count')
AF.df <- data.frame(AF=(muts$d - muts$a)/muts$d)
ggplot(AF.df, aes(AF)) + geom_histogram(bins=100,color='black',fill='lightblue',linetype='dashed') + xlab('Cellular Frequency') + ylab('Count')
AF.df <- data.frame(AF=(muts$d - muts$a)/muts$d)
ggplot(AF.df, aes(AF)) + geom_histogram(bins=500,color='black',fill='lightblue',linetype='dashed') + xlab('Cellular Frequency') + ylab('Count')
dim(muts)
AF.df <- data.frame(AF=(muts$d - muts$a)/muts$d)
ggplot(AF.df, aes(AF)) + geom_histogram(bins=50,color='black',fill='lightblue',linetype='dashed') + xlab('Cellular Frequency') + ylab('Count')
AF.df <- data.frame(AF=(muts$d - muts$a)/muts$d)
ggplot(AF.df, aes(AF)) + geom_density()
AF.df <- data.frame(AF=(muts$d - muts$a)/muts$d)
ggplot(AF.df, aes(AF)) + geom_density() + geom_histogram()
AF.df <- data.frame(AF=(muts$d - muts$a)/muts$d)
ggplot(AF.df, aes(AF)) + geom_histogram(bins=50,color='black',fill='lightblue',linetype='dashed') + xlab('Cellular Frequency') +  + geom_density(color='red')+ ylab('Count')
AF.df <- data.frame(AF=(muts$d - muts$a)/muts$d)
ggplot(AF.df, aes(AF)) + geom_histogram(bins=50,color='black',fill='lightblue',linetype='dashed') + xlab('Cellular Frequency') +  geom_density(color='red')+ ylab('Count')
AF.df <- data.frame(AF=(muts$d - muts$a)/muts$d)
ggplot(AF.df, aes(AF)) + geom_histogram(bins=50,color='black',fill='lightblue',linetype='dashed') + xlab('Cellular Frequency')
AF.df <- data.frame(AF=(muts$d - muts$a)/muts$d)
ggplot(AF.df, aes(AF)) + geom_histogram(bins=50,color='black',fill='lightblue',linetype='dashed') + xlab('Variant Allele Frequency') + ylab('Counts')
AF.df <- data.frame(AF=(muts$d - muts$a)/muts$d)
ggplot(AF.df, aes(AF)) + geom_histogram(bins=80,color='black',fill='lightblue',linetype='dashed') + xlab('Variant Allele Frequency') + ylab('Counts')
AF.df <- data.frame(AF=(muts$d - muts$a)/muts$d)
ggplot(AF.df, aes(AF)) + geom_histogram(bins=90,color='black',fill='lightblue',linetype='dashed') + xlab('Variant Allele Frequency') + ylab('Counts')
AF.df <- data.frame(AF=(muts$d - muts$a)/muts$d)
ggplot(AF.df, aes(AF)) + geom_histogram(bins=120,color='black',fill='lightblue',linetype='dashed') + xlab('Variant Allele Frequency') + ylab('Counts')
AF.df <- data.frame(AF=(muts$d - muts$a)/muts$d)
ggplot(AF.df, aes(AF)) + geom_histogram(bins=200,color='black',fill='lightblue',linetype='dashed') + xlab('Variant Allele Frequency') + ylab('Counts')
AF.df <- data.frame(AF=(muts$d - muts$a)/muts$d)
ggplot(AF.df, aes(AF)) + geom_histogram(bins=200,color='black',fill='lightblue') + xlab('Variant Allele Frequency') + ylab('Counts')
AF.df <- data.frame(AF=(muts$d - muts$a)/muts$d)
ggplot(AF.df, aes(AF)) + geom_histogram(bins=70,color='black',fill='lightblue') + xlab('Variant Allele Frequency') + ylab('Counts')
muts <- read.table('ssm_data.txt',sep='\t',header=T)
muts$r <- muts$d - muts$a
AF.df <- data.frame(AF=muts$r/muts$d)
ggplot(AF.df, aes(AF)) + geom_histogram(bins=70,color='black',fill='lightblue') + xlab('Variant Allele Frequency') + ylab('Counts')
ggplot(muts, aes(x=d, y=r)) + geom_point()
muts <- read.table('ssm_data.txt',sep='\t',header=T)
muts$chr <- factor(
sapply(
strsplit(muts$gene,split='_'),
function(x){x[1]}
)
)
strsplit(muts$gene,split = '_')
strsplit(as.character(muts$gene,split) = '_')
strsplit(as.character(muts$gene),split='_')
muts <- read.table('ssm_data.txt',sep='\t',header=T)
muts$chr <- factor(
sapply(
strsplit(as.character(muts$gene),split = '_'),
function(x){x[1]}
)
)
muts$r <- muts$d - muts$a
ggplot(muts, aes(x=d, y=r,color=chr)) + geom_point()
ggplot(muts, aes(x=d, y=r,color=chr)) + geom_point(size=3)
ggplot(muts, aes(x=d, y=r,color=chr)) + geom_point(size=0.1)
ggplot(muts, aes(x=d, y=r,color=chr)) + geom_point(size=0.5)
muts <- read.table('ssm_data.txt',sep='\t',header=T)
muts$chr <- factor(
sapply(
strsplit(as.character(muts$gene),split = '_'),
function(x){x[1]}
)
)
muts$r <- muts$d - muts$a
muts$AF <- muts$a/muts$d
ggplot(muts, aes(AF)) + geom_histogram(bins=70,color='black',fill='lightblue') + xlab('Variant Allele Frequency') + ylab('Counts')
muts <- read.table('ssm_data.txt',sep='\t',header=T)
muts$chr <- factor(
sapply(
strsplit(as.character(muts$gene),split = '_'),
function(x){x[1]}
)
)
muts$r <- muts$d - muts$a
muts$AF <- muts$r/muts$d
ggplot(muts, aes(AF)) + geom_histogram(bins=70,color='black',fill='lightblue') + xlab('Variant Allele Frequency') + ylab('Counts')
ggplot(muts, aes(x=d, y=AF,color=chr)) + geom_point(size=0.5)
ggplot(muts, aes(x=d, y=AF,color=chr)) + geom_point()
ggplot(muts, aes(x=d, y=AF,color=chr)) + geom_point(size=1)
ggplot(muts, aes(x=d, y=AF,color=chr)) + geom_point(size=0.8)
ggplot(muts, aes(x=d, y=AF,color=chr)) + geom_point(size=0.1)
head(muts)
muts.filt <- muts[muts$d>50,]
ggplot(muts.filt, aes(x=d, y=AF,color=chr)) + geom_point(size=0.1)
ggplot(muts, aes(x=d, y=AF,color=chr)) + geom_point(size=0.1)
ggplot(muts, aes(x=d, y=AF,color=chr)) + geom_point() + xlab('Read Depth at Variant Site') + ylab('Variant Allele Frequency')
cnv.calls$Clonal_Cluster <- as.factor(cnv.calls$Clonal_Cluster)
ggplot(cnv.calls, aes(y=Copy_Number,x=Clonal_Cluster,fill=Clonal_Cluster)) +
geom_boxplot() + theme(legend.position = 'none') + xlab('Clonal Cluster') + ylab('Copy Number')
ggplot(cnv.calls, aes(Clonal_Frequency)) + geom_histogram(bins=30,color='black',fill='lightblue',linetype='dashed') + xlab('Cellular Frequency') + ylab('Count')
library(ggplot2)
sizes <-  (cnv.calls$End_Position.bp. - cnv.calls$Start_Position.bp.)/1000
size.df <- data.frame(sizes=sizes[sizes<500])
ggplot(size.df, aes(sizes)) + geom_histogram(bins=30,color='black',fill='lightblue',linetype='dashed') + xlab('CNV size (kb)')
library(data.table)
cnv.calls <- fread('~/phyloRNA/DO32_CNA_calls_5Subclones.txt',sep='\t', header=T)
sum(sizes < 0.1)
sum(sizes < 1)
sum(sizes < 10)
par(mfrow=c(2,1))
ggplot(muts, aes(x=d, y=AF,color=chr)) + geom_point() + xlab('Read Depth at Variant Site') + ylab('Variant Allele Frequency')
ggplot(muts, aes(AF)) + geom_histogram(bins=70,color='black',fill='lightblue') + xlab('Variant Allele Frequency') + ylab('Counts')
muts <- read.table('SSM_CNV_results/ssm_data_2500.txt',sep='\t',header=T)
muts$chr <- factor(
sapply(
strsplit(as.character(muts$gene),split = '_'),
function(x){x[1]}
)
)
muts$r <- muts$d - muts$a
muts$AF <- muts$r/muts$d
ggplot(muts, aes(x=d, y=AF,color=chr)) + geom_point() + xlab('Read Depth at Variant Site') + ylab('Variant Allele Frequency')
ggplot(muts, aes(AF)) + geom_histogram(bins=70,color='black',fill='lightblue') + xlab('Variant Allele Frequency') + ylab('Counts')
muts <- read.table('SSM_CNV_results/ssm_data.txt',sep='\t',header=T)
muts$chr <- factor(
sapply(
strsplit(as.character(muts$gene),split = '_'),
function(x){x[1]}
)
)
muts$r <- muts$d - muts$a
muts$AF <- muts$r/muts$d
ggplot(muts, aes(x=d, y=AF,color=chr)) + geom_point() + xlab('Read Depth at Variant Site') + ylab('Variant Allele Frequency')
ggplot(muts, aes(AF)) + geom_histogram(bins=70,color='black',fill='lightblue') + xlab('Variant Allele Frequency') + ylab('Counts')
ggplot(muts, aes(AF)) + geom_histogram(bins=70,color='black',fill='lightblue') + xlab('Variant Allele Frequency') + ylab('Counts')
muts <- read.table('SSM_CNV_results/ssm_data_2500.txt',sep='\t',header=T)
muts$chr <- factor(
sapply(
strsplit(as.character(muts$gene),split = '_'),
function(x){x[1]}
)
)
muts$r <- muts$d - muts$a
muts$AF <- muts$r/muts$d
ggplot(muts, aes(AF)) + geom_histogram(bins=70,color='black',fill='lightblue') + xlab('Variant Allele Frequency') + ylab('Counts') + ggtitle('Somatic Mutations (18k)')
ggplot(muts, aes(AF)) + geom_histogram(bins=70,color='black',fill='lightblue') + xlab('Variant Allele Frequency') + ylab('Counts') + ggtitle('Somatic Mutations (2500)')
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
library(Biobase)
library(sva)
install.packages(c("devtools","factoextra"))
source("http://www.bioconductor.org/biocLite.R")
biocLite(c("Biobase","sva","bladderbatch","snpStats"))
library(devtools)
library(Biobase)
library(sva)
library(bladderbatch)
library(snpStats)
library(factoextra)
install.packages('factoextra')
library(devtools)
library(Biobase)
library(sva)
library(bladderbatch)
library(snpStats)
library(factoextra)
install.packages('maPooling')
setwd('~/Bios26121/')
rmarkdown::render_site()
df <- data.frame(one=c(5,2,3,4),
two=c(4,1,4,2),
three=c(3,4,6,8)
)
rownames(df) <- toupper(letters[1:4])
# Determine the ranks of each column from lowest to highest:
df_rank <- apply(df,2,rank,ties.method="min")
#Sort the original matrix from lowest to highest;
df_sorted <- data.frame(apply(df, 2, sort))
#Calculate the means:
df_mean <- apply(df_sorted, 1, mean)
#Finally substitute the means into our ranked matrix:
index_to_mean <- function(my_index, my_mean){
return(my_mean[my_index])
}
df_final <- apply(df_rank, 2, index_to_mean, my_mean=df_mean)
rownames(df_final) <- toupper(letters[1:4])
#load data
load("normalization_example.RData")
mp = montpick.eset
pdata=pData(mp)
edata=as.data.frame(exprs(mp))
fdata = fData(mp)
ls()
#show distributions for log2 counts for several samples
edata = log2(edata + 1)
edata = edata[rowMeans(edata) > 3, ]
colramp = colorRampPalette(c(3,"white",2))(20)
plot(density(edata[,1]),col=colramp[1],lwd=3,ylim=c(0,.30))
for(i in 2:20){lines(density(edata[,i]),lwd=3,col=colramp[i])}
library(preprocessCore)
ggplot(muts, aes(x=d, y=AF,color=chr)) + geom_point(size=0.8) + xlab('Read Depth at Variant Site') + ylab('Variant Allele Frequency') + theme(legend.position = 'none')
library(png)
library(grid)
img <- readPNG("no_branch.png")
grid.raster(img)
library(png)
library(grid)
img <- readPNG("no_branch.png")
grid.raster(img)
library(png)
library(grid)
img <- readPNG("bestTree.png")
grid.raster(img)
img <- readPNG("alt_topology1.png")
grid.raster(img)
img <- readPNG("alt_topology2.png")
grid.raster(img)
